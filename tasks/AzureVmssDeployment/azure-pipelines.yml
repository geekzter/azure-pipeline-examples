parameters:
- name: pool
  displayName: Agent Pool
  type: string
  default: 'Azure Pipelines'
- name: serviceConnection
  displayName: Override Service Connection
  type: string
  default: 'my-azure-subscription'
- name: vmssName
  displayName: VMSS Name
  type: string
- name: vmssOsType
  displayName: OS
  type: string
  default: Linux
  values:
  - Linux
  - Windows
- name: customScriptsStorageAccount
  displayName: 'Custom Scripts Storage Account'
  type: string


trigger: none

jobs:
- job: rbacTest
  displayName: 'RBAC Tests'

  pool:
    name: '${{ parameters.pool }}'
    vmImage: ubuntu-latest
    
  steps:
  - task: AzureCLI@2
    displayName: List RBAC roles for ${{ parameters.serviceConnection }} and ${{ parameters.vmssName }}
    inputs:
      azureSubscription: '${{ parameters.serviceConnection }}'
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |
        # Get service connection identity
        az account show --query user.name -o tsv | Set-Variable appId
        az ad sp show --id $appId --query id -o tsv | Set-Variable principalId

        # List roles for the service connection
        az vmss list --query "[?name=='${{ parameters.vmssName }}'].id" -o tsv | Set-Variable vmssId
        Write-Host "`nRoles for service connection ${{ parameters.serviceConnection }} on VMSS '${{ parameters.vmssName }}':"
        az role assignment list --assignee $principalId --include-inherited --scope $vmssId --query "[].roleDefinitionName" -o tsv | Sort-Object | Get-Unique

        az storage account list --query "[?name=='${{ parameters.customScriptsStorageAccount }}'].id" -o tsv | Set-Variable storageAccountId
        Write-Host "`nRoles for service connection ${{ parameters.serviceConnection }} on storage account '${{ parameters.customScriptsStorageAccount }}':"
        az role assignment list --assignee $principalId --include-inherited --scope $storageAccountId --query "[].roleDefinitionName" -o tsv | Sort-Object | Get-Unique

        # List roles for the VMSS
        az resource show --id $vmssId --query identity.principalId -o tsv | Set-Variable vmssPrincipalId
        if ($vmssPrincipalId) {
          Write-Host "`nRoles for VMSS ${{ parameters.vmssName }} on storage account '${{ parameters.customScriptsStorageAccount }}':"
          az role assignment list --assignee-object-id $vmssPrincipalId --include-inherited --scope $storageAccountId --query "[].roleDefinitionName" -o tsv | Sort-Object | Get-Unique
        } else {
          Write-Host "`nVMSS ${{ parameters.vmssName }} does not have a system-assigned managed identity."
        }

  # https://docs.microsoft.com/azure/devops/pipelines/tasks/deploy/azure-vmss-deployment
  - task: AzureVmssDeployment@1
    inputs:
      azureSubscription: '${{ parameters.serviceConnection }}'
      action: 'Configure application startup'
      vmssName: '${{ parameters.vmssName }}'
      vmssOsType: '${{ parameters.vmssOsType }}'
      customScriptsDirectory: '$(Build.SourcesDirectory)/tasks/AzureVmssDeployment/scripts'
      customScript: |
        lsb_release -d
      customScriptsStorageAccount: '${{ parameters.customScriptsStorageAccount }}'
      skipArchivingCustomScripts: false
