# Pipeline to test Service Connections

parameters:
- name: serviceConnection
  displayName: Override Service Connection
  type: string
  default: 'my-azure-subscription'
- name: azModuleVersion
  displayName: Azure Module Version
  type: string
  default: 'latest'

name: $(Date:yyyyMMdd)$(Rev:.r)-$(Build.DefinitionVersion)-$(SourceBranchName)-$(Build.BuildId)

pr: none
trigger: none

variables:
- name: serviceConnection
  ${{ if eq(parameters.serviceConnection, '<from serviceConnection variable>') }}:
    value: $[ variables['serviceConnectionDefault'] ]
  ${{ else }}:
    value: '${{ parameters.serviceConnection }}'
- name: azModuleVersion
  value: '${{ parameters.azModuleVersion }}'

jobs:
- job: azPowerShell
  displayName: 'Azure PowerShell'
  pool:
    name: 'Azure Pipelines'
    vmImage: ubuntu-latest
  steps:
  - task: AzurePowerShell@5
    displayName: 'Default'
    continueOnError: true
    inputs:
      azureSubscription: '$(serviceConnection)'
      scriptType: inlineScript
      inline: |
        Get-Module Az 
        Get-InstalledModule Az  
      pwsh: true
      failOnStandardError: true
  - task: AzurePowerShell@5
    displayName: 'latestVersion'
    continueOnError: true
    inputs:
      azureSubscription: '$(serviceConnection)'
      scriptType: inlineScript
      inline: |
        Set-PSDebug -Trace 1
        # Get-AzContext Format-List
        # Get-AzContext | Select-Object -ExpandProperty Subscription | Format-List

        Get-Module
        # Get-Module Az 
        # Get-InstalledModule Az  
      azurePowerShellVersion: 'latestVersion'
      pwsh: true
      failOnStandardError: true
  - task: AzurePowerShell@5
    displayName: 'Specified version'
    continueOnError: true
    inputs:
      azureSubscription: '$(serviceConnection)'
      scriptType: inlineScript
      inline: |
        Get-Module Az 
        Get-InstalledModule Az  
      azurePowerShellVersion: 'OtherVersion'
      preferredAzurePowerShellVersion: '$(azModuleVersion)'
      pwsh: true
      failOnStandardError: true
