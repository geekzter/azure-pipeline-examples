parameters:
- name: intervalMinutes
  displayName: Interval (minutes)
  type: number
  default: 1
- name: maxMinutes
  displayName: Maximum time (minutes)
  type: number
  default: 90

name: $(Date:yyyyMMdd)$(Rev:.r)-$(Build.DefinitionVersion)-$(SourceBranchName)-${{ variables.subscriptionConnection }}-${{ parameters.intervalMinutes }}-${{ parameters.maxMinutes }}-$(Build.BuildId)
trigger: none

jobs:
- job: session
  displayName: 'az account show'
  pool:
    name: Azure Pipelines
    vmImage: ubuntu-latest
  timeoutInMinutes: ${{ parameters.maxMinutes }}
  steps:
  - task: AzureCLI@2
    displayName: 'az account show with $(subscriptionConnection)'
    inputs:
      azureSubscription: $(subscriptionConnection)
      failOnStandardError: true
      powerShellIgnoreLASTEXITCODE: false
      powerShellErrorActionPreference: Stop
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        az account show 2>$null | ConvertFrom-Json | Set-Variable serviceConnection

        $stopwatch = [system.diagnostics.stopwatch]::StartNew()
        do {
          if (!(az account show 2>$null)) {
            Write-Host "##vso[task.logissue type=error]Token expired after $($stopwatch.Elapsed.TotalMinutes) minutes"
            exit 1
          }

          Write-Host "Elapsed time: $($stopwatch.Elapsed.TotalMinutes) minutes, sleeping for ${{ parameters.intervalMinutes }} minutes..."
          Start-Sleep -Seconds (60 * ${{ parameters.intervalMinutes }})
        } while ($stopwatch.Elapsed.TotalMinutes -lt (${{ parameters.maxMinutes }}-${{ parameters.intervalMinutes }}-1))

- job: login
  displayName: 'az login'
  pool:
    name: Azure Pipelines
    vmImage: ubuntu-latest
  timeoutInMinutes: ${{ parameters.maxMinutes }}
  steps:
  - task: AzureCLI@2
    displayName: 'az login with $(subscriptionConnection)'
    inputs:
      addSpnToEnvironment: true
      azureSubscription: $(subscriptionConnection)
      failOnStandardError: true
      powerShellIgnoreLASTEXITCODE: false
      powerShellErrorActionPreference: Stop
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        if (!$env:idToken) {
          Write-Host "##vso[task.logissue type=warning]idToken not available"
          exit
        }

        az account show 2>$null | ConvertFrom-Json | Set-Variable serviceConnection

        $stopwatch = [system.diagnostics.stopwatch]::StartNew()
        do {
          Write-Host "`nLogging out.."
          az logout 

          Write-Host "`nLog back in with federated token.."
          az login --service-principal -u $serviceConnection.user.name --tenant $serviceConnection.tenantId --allow-no-subscriptions --federated-token $env:idToken
          if (!(az account show 2>$null)) {
            Write-Host "##vso[task.logissue type=error]Token expired after $($stopwatch.Elapsed.TotalMinutes) minutes"
            exit 1
          }

          Write-Host "Elapsed time: $($stopwatch.Elapsed.TotalMinutes) minutes, sleeping for ${{ parameters.intervalMinutes }} minutes..."
          Start-Sleep -Seconds (60 * ${{ parameters.intervalMinutes }})
        } while ($stopwatch.Elapsed.TotalMinutes -lt (${{ parameters.maxMinutes }}-${{ parameters.intervalMinutes }}-1))

- job: accessToken
  displayName: 'az account get-access-token'
  pool:
    name: Azure Pipelines
    vmImage: ubuntu-latest
  timeoutInMinutes: ${{ parameters.maxMinutes }}
  steps:
  - task: AzureCLI@2
    displayName: 'az account get-access-token with $(subscriptionConnection)'
    inputs:
      azureSubscription: $(subscriptionConnection)
      failOnStandardError: true
      powerShellIgnoreLASTEXITCODE: false
      powerShellErrorActionPreference: Stop
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        $stopwatch = [system.diagnostics.stopwatch]::StartNew()
        do {
          $expiresOn = $null
          # $resource = '499b84ac-1321-427f-aa17-267ca6975798' # Azure DevOps
          $resource = 'https://kusto.kusto.windows.net'
          Write-Host "`nRequesting access token for '${resource}'.."
          az account get-access-token --resource $resource `
                                      --query "expiresOn" `
                                      --output tsv `
                                      | Set-Variable expiresOn
          if ($expiresOn) {
            Write-Host "Access token expires in $([math]::Round(([DateTime]::Parse($expiresOn) - [DateTime]::Now).TotalMinutes)) minutes"            
          } else {
            Write-Host "##vso[task.logissue type=error]Could not get access token"
            exit 1
          }

          Write-Host "Elapsed time: $($stopwatch.Elapsed.TotalMinutes) minutes, sleeping for ${{ parameters.intervalMinutes }} minutes..."
          Start-Sleep -Seconds (60 * ${{ parameters.intervalMinutes }})
        } while ($stopwatch.Elapsed.TotalMinutes -lt (${{ parameters.maxMinutes }}-${{ parameters.intervalMinutes }}-1))
