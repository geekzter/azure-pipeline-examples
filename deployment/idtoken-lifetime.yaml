parameters:
- name: intervalMinutes
  displayName: Interval (minutes)
  type: number
  default: 1
- name: maxMinutes
  displayName: Maximum time (minutes)
  type: number
  default: 30

name: $(Date:yyyyMMdd)$(Rev:.r)-$(Build.DefinitionVersion)-$(SourceBranchName)-${{ variables.subscriptionConnection }}-${{ parameters.intervalMinutes }}-${{ parameters.maxMinutes }}-$(Build.BuildId)
trigger: none

jobs:
- job: agent
  displayName: 'ID Token Lifetime test'
  pool:
    name: Azure Pipelines
    vmImage: ubuntu-latest
  timeoutInMinutes: ${{ parameters.maxMinutes }}
  steps:
  - task: AzureCLI@2
    inputs:
      azureSubscription: $(subscriptionConnection)
      failOnStandardError: true
      powerShellIgnoreLASTEXITCODE: false
      powerShellErrorActionPreference: Stop
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        Get-ChildItem -Path Env: -Recurse -Include ENDPOINT_DATA_* | Sort-Object -Property Name `
                                                                   | Select-Object -First 1 -ExpandProperty Name `
                                                                   | ForEach-Object { $_ -replace 'ENDPOINT_DATA_','' } `
                                                                   | Set-Variable serviceConnectionId
        $oidcRequestUrl = "${env:SYSTEM_TEAMFOUNDATIONCOLLECTIONURI}${env:SYSTEM_TEAMPROJECTID}/_apis/distributedtask/hubs/build/plans/${env:SYSTEM_PLANID}/jobs/${env:SYSTEM_JOBID}/oidctoken?api-version=7.1-preview.1&serviceConnectionId=${serviceConnectionId}"
        Invoke-RestMethod -Headers @{
                            Authorization  = "Bearer $(System.AccessToken)"
                            'Content-Type' = 'application/json'
                          } `
                          -Uri "${oidcRequestUrl}" `
                          -Method Post | Select-Object -ExpandProperty oidcToken `
                                       | Set-Variable oidcToken
        if (!$oidcToken) {
          Write-Error "Failed to get OIDC token from ${oidcRequestUrl}"
          exit 1
        }
        if ($oidcToken -notmatch "^ey") {
          Write-Error "OIDC token in unexpected format"
          exit 1
        }
        az account show 2>$null | ConvertFrom-Json | Set-Variable serviceConnection

        $stopwatch = [system.diagnostics.stopwatch]::StartNew()
        do {
          Write-Host "`nLogging out.."
          az logout 

          Write-Host "`nLog back in with federated token.."
          az login --service-principal -u $serviceConnection.user.name --tenant $serviceConnection.tenantId --allow-no-subscriptions --federated-token $oidcToken
          if (!(az account show 2>$null)) {
            Write-Host "##vso[task.logissue type=error]Token expired after $($stopwatch.Elapsed.TotalMinutes) minutes"
            exit 1
          }

          Write-Host "Elapsed time: $($stopwatch.Elapsed.TotalMinutes) minutes, sleeping for ${{ parameters.intervalMinutes }} minutes..."
          Start-Sleep -Seconds (60 * ${{ parameters.intervalMinutes }})
        } while ($stopwatch.Elapsed.TotalMinutes -lt (${{ parameters.maxMinutes }}-${{ parameters.intervalMinutes }}-1))

