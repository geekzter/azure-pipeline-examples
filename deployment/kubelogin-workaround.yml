trigger: none
schedules:
- cron: '0 1 * * *'
  displayName: 'Nightly build (UTC)'
  always: 'true'
  branches:
    include:
    - main

variables:
- group: 'kubernetes' # should contain subscriptionConnection, aksId
# - name: 'KUBECONFIG'
#   value: '~/.kube/config'

jobs:
- job: inspectCluster
  displayName: 'Kubernetes access & disable local accounts'
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - pwsh: |
      if ([string]::isNullOrEmpty('$(aksId)')) {
        Write-Error "aksId variable is not set"
        exit 1
      }
      $aksIdElements = '$(aksId)'.Split('/')
      if ($aksIdElements.Count -ne 9) {
        Write-Error "'$(aksId)'' is not a valid AKS resource id"
        exit 1
      }
      $aksName = $aksIdElements[8]
      $resourceGroupName = $aksIdElements[4]
      Write-Host "aksId: $(aksId)"
      Write-Host "aksName: ${aksName}"
      Write-Host "resourceGroupName: ${resourceGroupName}"
      Write-Host "##vso[task.setvariable variable=aksName;isOutput=true]${aksName}"
      Write-Host "##vso[task.setvariable variable=resourceGroupName;isOutput=true]${resourceGroupName}"
    displayName: 'Prepare variables'
    name: split

  - task: AzureCLI@2
    displayName: 'Inspect cluster'
    inputs:
      addSpnToEnvironment: true
      azureSubscription: '$(subscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        az aks show -n $(split.aksName) -g $(split.resourceGroupName) `
                    --query "{kubernetesVersion:kubernetesVersion, powerState:powerState.code, disableLocalAccounts:disableLocalAccounts, enableRbac:enableRbac, enableAzureRbac:aadProfile.enableAzureRbac, fqdn:fqdn, privateFqdn:privateFqdn, publicNetworkAccess:publicNetworkAccess, outboundType:networkProfile.outboundType, provisioningState:provisioningState}" `
                    | ConvertFrom-Json `
                    | Set-Variable cluster
        
        $cluster | Format-List
        if (!($cluster.enableAzureRbac)) {
          Write-Host "##vso[task.logissue type=error]Azure RBAC is not enabled on $(split.aksName)"
          exit 1
        }

        Write-Host "`nAKS role assignments for the service connection:"
        az role assignment list --assignee $env:servicePrincipalId `
                                --include-inherited `
                                --scope $(aksId) `
                                --query "[].{Role:roleDefinitionName, Scope:scope}" `
                                -o json `
                                | ConvertFrom-Json `
                                | Set-Variable roleAssignments
        $roleAssignments | Format-Table -AutoSize
        $roleAssignments | Where-Object {$_.Role -imatch "Kubernetes.*RBAC"} | Set-Variable aksRoleAssignments
        if ($aksRoleAssignments.Count -eq 0) {
          Write-Host "##vso[task.logissue type=warning]No AKS RBAC assignments found on $(split.aksName) for the Service Connection"
        }

        if ($cluster.powerState -ne "Running") {
          Write-Host "Starting cluster..."
          az aks wait  -n $(split.aksName) -g $(split.resourceGroupName) --updated
          az aks start -n $(split.aksName) -g $(split.resourceGroupName)
          az aks wait  -n $(split.aksName) -g $(split.resourceGroupName) --updated
        }

  # https://learn.microsoft.com/en-us/azure/aks/managed-aad#disable-local-accounts
  - task: AzureCLI@2
    displayName: 'Disable local accounts'
    name: localAccounts
    inputs:
      azureSubscription: '$(subscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        az aks show -n $(split.aksName) -g $(split.resourceGroupName) --query "disableLocalAccounts" | Set-Variable disableLocalAccounts
        if ($disableLocalAccounts -ne "true") {
          Write-Host "`nDisabling local accounts on $(split.aksName)..."
          az aks update -n $(split.aksName) -g $(split.resourceGroupName) --disable-local-accounts
        } else {
          Write-Host "Local accounts are already enabled on $(split.aksName)"
        }
        Write-Host "##vso[task.setvariable variable=disableLocalAccountsOriginalState;isOutput=true]${disableLocalAccounts}"

- job: kubectlLocalAccountsDisabledTimeout
  continueOnError: true
  dependsOn: inspectCluster
  displayName: 'kubectl (local accounts disabled, times out)'
  variables:
    aksName: $[ dependencies.inspectCluster.outputs['split.aksName'] ]
    resourceGroupName: $[ dependencies.inspectCluster.outputs['split.resourceGroupName'] ]
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - template: install-kubelogin.yml

  - pwsh: |
      kubelogin -h
    displayName: 'Test kubelogin'

  # Fails as kubelogin is installed, but not configured and will prompt for interactive login
  - task: AzureCLI@2
    condition: succeededOrFailed()
    continueOnError: true 
    displayName: 'kubectl (times out)'
    timeoutInMinutes: 1
    inputs:
      azureSubscription: '$(subscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        kubectl config unset contexts.$(aksName)
        kubectl config unset contexts.$(aksName)-admin

        az aks get-credentials -n $(aksName) -g $(resourceGroupName) --overwrite-existing

        kubectl config view
        Write-Host "##vso[task.logissue type=warning]The next command (kubectl cluster-info) will time out as kubelogin is installed, but not configured and will prompt for interactive login"
        kubectl cluster-info
        kubectl get nodes


- job: kubectlLocalAccountsDisabled
  dependsOn: inspectCluster
  displayName: 'kubectl (local accounts disabled)'
  variables:
    aksName: $[ dependencies.inspectCluster.outputs['split.aksName'] ]
    resourceGroupName: $[ dependencies.inspectCluster.outputs['split.resourceGroupName'] ]
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  # Fails as kubelogin is not installed
  - task: AzureCLI@2
    condition: succeededOrFailed()
    continueOnError: true 
    displayName: 'kubectl (fails)'
    inputs:
      azureSubscription: '$(subscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        kubectl config unset contexts.$(aksName)
        kubectl config unset contexts.$(aksName)-admin

        az aks get-credentials -n $(aksName) -g $(resourceGroupName) --overwrite-existing

        kubectl config view
        Write-Host "##vso[task.logissue type=warning]The next command (kubectl cluster-info) will fail as kubelogin is not installed"
        kubectl cluster-info
        kubectl get nodes

  # Fails as admin credentials are not available when local accounts are disabled
  - task: AzureCLI@2
    condition: succeededOrFailed()
    continueOnError: true 
    displayName: 'kubectl admin (fails)'
    inputs:
      azureSubscription: '$(subscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        kubectl config unset contexts.$(aksName)
        kubectl config unset contexts.$(aksName)-admin

        Write-Host "##vso[task.logissue type=warning]The next command (az aks get-credentials) will fail as admin credentials are not available when local accounts are disabled"
        az aks get-credentials -n $(aksName) -g $(resourceGroupName) --overwrite-existing -a

        kubectl config view
        kubectl cluster-info
        kubectl get nodes

  # Fails due to insufficient permissions to install kubelogin on hosted agents
  - task: AzureCLI@2
    condition: succeededOrFailed()
    continueOnError: true 
    displayName: 'Install kubelogin with az cli (fails)'
    inputs:
      azureSubscription: '$(subscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        Write-Host "##vso[task.logissue type=warning]The next command (az aks install-cli --kubelogin-version latest) will fail due insufficient permissions to install kubelogin in default location on hosted agents"
        az aks install-cli --kubelogin-version latest

  - template: install-kubelogin.yml

  - pwsh: |
      kubelogin -h
    displayName: 'Test kubelogin'

  - task: AzureCLI@2
    condition: succeededOrFailed()
    displayName: 'kubectl with kubelogin (azure cli)'
    inputs:
      azureSubscription: '$(subscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        kubectl config unset contexts.$(aksName)
        kubectl config unset contexts.$(aksName)-admin
        kubelogin remove-tokens
        
        az aks get-credentials -n $(aksName) -g $(resourceGroupName) --overwrite-existing
        kubelogin convert-kubeconfig -l azurecli

        kubectl config view
        kubectl cluster-info
        kubectl get nodes

  # Fails as admin credentials are not available when local accounts are disabled
  - task: AzureCLI@2
    condition: succeededOrFailed()
    continueOnError: true 
    displayName: 'kubectl with kubelogin admin (azure cli, fails)'
    inputs:
      azureSubscription: '$(subscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        kubectl config unset contexts.$(aksName)
        kubectl config unset contexts.$(aksName)-admin
        kubelogin remove-tokens
        
        Write-Host "##vso[task.logissue type=warning]The next command (az aks get-credentials) fails as local accounts are disabled: https://learn.microsoft.com/azure/aks/managed-aad#disable-local-accounts"
        az aks get-credentials -n $(aksName) -g $(resourceGroupName) --admin --overwrite-existing

  - task: AzureCLI@2
    condition: succeededOrFailed()
    displayName: 'kubectl with kubelogin (sp)'
    inputs:
      addSpnToEnvironment: true
      azureSubscription: '$(subscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        kubectl config unset contexts.$(aksName)
        kubectl config unset contexts.$(aksName)-admin
        kubelogin remove-tokens

        az aks get-credentials -n $(aksName) -g $(resourceGroupName) --overwrite-existing
        kubelogin convert-kubeconfig -l spn --client-id $env:servicePrincipalId --client-secret $env:servicePrincipalKey

        kubectl config view
        kubectl cluster-info
        kubectl get nodes

  # Fails as admin credentials are not available when local accounts are disabled
  - task: AzureCLI@2
    condition: succeededOrFailed()
    continueOnError: true 
    displayName: 'kubectl with kubelogin admin (sp, fails)'
    inputs:
      addSpnToEnvironment: true
      azureSubscription: '$(subscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        kubectl config unset contexts.$(aksName)
        kubectl config unset contexts.$(aksName)-admin
        kubelogin remove-tokens
        
        Write-Host "##vso[task.logissue type=warning]The next command (az aks get-credentials) fails as local accounts are disabled: https://learn.microsoft.com/azure/aks/managed-aad#disable-local-accounts"
        az aks get-credentials -n $(aksName) -g $(resourceGroupName) --admin --overwrite-existing


- job: kubectlTaskLocalAccountsDisabledTimeout
  continueOnError: true
  dependsOn: inspectCluster
  displayName: 'Kubernetes@1 (local accounts disabled, times out)'
  variables:
    aksName: $[ dependencies.inspectCluster.outputs['split.aksName'] ]
    resourceGroupName: $[ dependencies.inspectCluster.outputs['split.resourceGroupName'] ]
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - template: install-kubelogin.yml

  - task: AzureCLI@2
    condition: succeededOrFailed()
    continueOnError: true 
    displayName: 'Configure kubectl, but not kubelogin'
    inputs:
      azureSubscription: '$(subscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        kubectl config unset contexts.$(aksName)
        kubectl config unset contexts.$(aksName)-admin

        az aks get-credentials -n $(aksName) -g $(resourceGroupName) --overwrite-existing

  # Fails as kubelogin is installed, but not configured and will prompt for interactive login
  - task: Kubernetes@1
    continueOnError: true
    displayName: 'Kubernetes@1 (times out)'
    timeoutInMinutes: 1
    inputs:
      connectionType: 'None'
      azureResourceGroup: $(resourceGroupName)
      kubernetesCluster: $(aksName)
      command: 'get'
      arguments: nodes
      useClusterAdmin: false


- job: kubectlTaskLocalAccountsDisabled
  dependsOn: inspectCluster
  displayName: 'Kubernetes@1 (local accounts disabled)'
  variables:
    aksName: $[ dependencies.inspectCluster.outputs['split.aksName'] ]
    resourceGroupName: $[ dependencies.inspectCluster.outputs['split.resourceGroupName'] ]
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  # Fails as kubelogin is not installed & configured
  - task: Kubernetes@1
    continueOnError: true 
    displayName: 'Kubernetes@1 (fails)'
    inputs:
      connectionType: 'Azure Resource Manager'
      azureSubscriptionEndpoint: $(subscriptionConnection)
      azureResourceGroup: $(resourceGroupName)
      kubernetesCluster: $(aksName)
      command: 'get'
      arguments: nodes
      useClusterAdmin: false

  # Fails as local accounts are disabled: https://learn.microsoft.com/azure/aks/managed-aad#disable-local-accounts
  - task: Kubernetes@1
    continueOnError: true 
    displayName: 'Kubernetes@1 admin (fails)'
    inputs:
      connectionType: 'Azure Resource Manager'
      azureSubscriptionEndpoint: $(subscriptionConnection)
      azureResourceGroup: $(resourceGroupName)
      kubernetesCluster: $(aksName)
      command: 'get'
      arguments: nodes
      useClusterAdmin: false

  - template: install-kubelogin.yml

  - task: AzureCLI@2
    displayName: 'Configure kubectl with kubelogin (sp)'
    inputs:
      addSpnToEnvironment: true
      azureSubscription: '$(subscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        kubectl config unset contexts.$(aksName)
        kubectl config unset contexts.$(aksName)-admin
        kubelogin remove-tokens

        az aks get-credentials -n $(aksName) -g $(resourceGroupName) --overwrite-existing
        kubelogin convert-kubeconfig -l spn --client-id $env:servicePrincipalId --client-secret $env:servicePrincipalKey

        kubectl config view
        kubectl cluster-info
        kubectl get nodes

  - task: Kubernetes@1
    displayName: 'Kubernetes@1'
    inputs:
      connectionType: 'None'
      azureResourceGroup: $(resourceGroupName)
      kubernetesCluster: $(aksName)
      command: 'get'
      arguments: nodes
      useClusterAdmin: false

  # Fails as admin credentials are not available when local accounts are disabled
  - task: AzureCLI@2
    continueOnError: true
    displayName: 'Configure kubectl with kubelogin admin (sp, fails)'
    inputs:
      addSpnToEnvironment: true
      azureSubscription: '$(subscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        kubectl config unset contexts.$(aksName)
        kubectl config unset contexts.$(aksName)-admin
        kubelogin remove-tokens

        Write-Host "##vso[task.logissue type=warning]The next command (az aks get-credentials) fails as local accounts are disabled: https://learn.microsoft.com/azure/aks/managed-aad#disable-local-accounts"
        az aks get-credentials -n $(aksName) -g $(resourceGroupName) --admin --overwrite-existing

  # Fails as admin credentials are not available when local accounts are disabled
  - task: Kubernetes@1
    continueOnError: true
    displayName: 'Kubernetes@1 admin (fails)'
    enabled: false # will fail
    inputs:
      connectionType: 'None'
      azureResourceGroup: $(resourceGroupName)
      kubernetesCluster: $(aksName)
      command: 'get'
      arguments: nodes
      useClusterAdmin: true


- job: enableLocalAccounts
  condition: and(succeededOrFailed(),ne(coalesce(dependencies.inspectCluster.outputs['localAccounts.disableLocalAccountsOriginalState'],'empty'),'empty'))
  dependsOn: 
  - inspectCluster
  - kubectlLocalAccountsDisabled
  - kubectlLocalAccountsDisabledTimeout
  - kubectlTaskLocalAccountsDisabled
  - kubectlTaskLocalAccountsDisabledTimeout
  displayName: 'Enable Local Accounts'
  pool:
    vmImage: 'ubuntu-latest'
  variables:
    aksName: $[ dependencies.inspectCluster.outputs['split.aksName'] ]
    resourceGroupName: $[ dependencies.inspectCluster.outputs['split.resourceGroupName'] ]
  steps:
  - task: AzureCLI@2
    condition: succeededOrFailed()
    displayName: 'Enable local accounts'
    inputs:
      azureSubscription: '$(subscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        Write-Host "`nEnabling local accounts on $(aksName)..."
        az aks wait   -n $(aksName) -g $(resourceGroupName) --updated
        az aks update -n $(aksName) -g $(resourceGroupName) --enable-local-accounts
        az aks wait   -n $(aksName) -g $(resourceGroupName) --updated


# Timeout repro when kubelogin is installed, but not configured
- job: kubectlLocalAccountsEnabledTimeout
  condition: and(succeededOrFailed(),ne(coalesce(dependencies.inspectCluster.outputs['localAccounts.disableLocalAccountsOriginalState'],'empty'),'empty'))
  continueOnError: true
  dependsOn: 
  - inspectCluster
  - enableLocalAccounts
  displayName: 'kubectl (local accounts enabled, times out)'
  variables:
    aksName: $[ dependencies.inspectCluster.outputs['split.aksName'] ]
    resourceGroupName: $[ dependencies.inspectCluster.outputs['split.resourceGroupName'] ]
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - template: install-kubelogin.yml

  - pwsh: |
      kubelogin -h
    displayName: 'Test kubelogin'

  # Fails as kubelogin is installed, but not configured and will prompt for interactive login
  - task: AzureCLI@2
    condition: succeededOrFailed()
    continueOnError: true 
    displayName: 'kubectl (times out)'
    timeoutInMinutes: 1
    inputs:
      azureSubscription: '$(subscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        kubectl config unset contexts.$(aksName)
        kubectl config unset contexts.$(aksName)-admin

        az aks get-credentials -n $(aksName) -g $(resourceGroupName) --overwrite-existing

        kubectl config view
        Write-Host "##vso[task.logissue type=warning]The next command (kubectl cluster-info) will time out as kubelogin is installed, but not configured and will prompt for interactive login"
        kubectl cluster-info
        kubectl get nodes

- job: kubectlTaskLocalAccountsEnabledTimeout
  condition: and(succeededOrFailed(),ne(coalesce(dependencies.inspectCluster.outputs['localAccounts.disableLocalAccountsOriginalState'],'empty'),'empty'))
  continueOnError: true
  dependsOn: 
  - inspectCluster
  - enableLocalAccounts
  displayName: 'Kubernetes@1 (local accounts enabled, times out)'
  variables:
    aksName: $[ dependencies.inspectCluster.outputs['split.aksName'] ]
    resourceGroupName: $[ dependencies.inspectCluster.outputs['split.resourceGroupName'] ]
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - template: install-kubelogin.yml

  - task: AzureCLI@2
    condition: succeededOrFailed()
    continueOnError: true 
    displayName: 'Configure kubectl, but not kubelogin'
    inputs:
      azureSubscription: '$(subscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        kubectl config unset contexts.$(aksName)
        kubectl config unset contexts.$(aksName)-admin

        az aks get-credentials -n $(aksName) -g $(resourceGroupName) --overwrite-existing

  # Fails as kubelogin is installed, but not configured and will prompt for interactive login
  - task: Kubernetes@1
    continueOnError: true
    displayName: 'Kubernetes@1 (times out)'
    timeoutInMinutes: 1
    inputs:
      connectionType: 'None'
      azureResourceGroup: $(resourceGroupName)
      kubernetesCluster: $(aksName)
      command: 'get'
      arguments: nodes
      useClusterAdmin: false


- job: kubectlLocalAccountsEnabled
  condition: and(succeededOrFailed(),ne(coalesce(dependencies.inspectCluster.outputs['localAccounts.disableLocalAccountsOriginalState'],'empty'),'empty'))
  dependsOn: 
  - inspectCluster
  - enableLocalAccounts
  displayName: 'kubectl (local accounts enabled)'
  pool:
    vmImage: 'ubuntu-latest'
  variables:
    aksName: $[ dependencies.inspectCluster.outputs['split.aksName'] ]
    resourceGroupName: $[ dependencies.inspectCluster.outputs['split.resourceGroupName'] ]
  steps:
  # Fails as kubelogin is not installed
  - task: AzureCLI@2
    condition: succeededOrFailed()
    continueOnError: true 
    displayName: 'kubectl (fails)'
    inputs:
      azureSubscription: '$(subscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        kubectl config unset contexts.$(aksName)
        kubectl config unset contexts.$(aksName)-admin

        az aks get-credentials -n $(aksName) -g $(resourceGroupName) --overwrite-existing

        kubectl config view
        Write-Host "##vso[task.logissue type=warning]The next command (kubectl cluster-info) fails as kubelogin is not installed"
        kubectl cluster-info
        kubectl get nodes

  # Works as admin credentials are used and kubelogin is not needed
  - task: AzureCLI@2
    condition: succeededOrFailed()
    displayName: 'kubectl admin'
    inputs:
      azureSubscription: '$(subscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        kubectl config unset contexts.$(aksName)
        kubectl config unset contexts.$(aksName)-admin

        az aks get-credentials -n $(aksName) -g $(resourceGroupName) --overwrite-existing -a

        kubectl config view
        kubectl cluster-info
        kubectl get nodes


- job: kubectlTaskLocalAccountsEnabled
  condition: and(succeededOrFailed(),ne(coalesce(dependencies.inspectCluster.outputs['localAccounts.disableLocalAccountsOriginalState'],'empty'),'empty'))
  dependsOn: 
  - inspectCluster
  - enableLocalAccounts
  displayName: 'Kubernetes@1 (local accounts enabled)'
  pool:
    vmImage: 'ubuntu-latest'
  variables:
    aksName: $[ dependencies.inspectCluster.outputs['split.aksName'] ]
    resourceGroupName: $[ dependencies.inspectCluster.outputs['split.resourceGroupName'] ]
  steps:
  # Fails as kubelogin is not installed
  - task: Kubernetes@1
    continueOnError: true 
    displayName: 'Kubernetes@1 (fails)'
    inputs:
      connectionType: 'Azure Resource Manager'
      azureSubscriptionEndpoint: $(subscriptionConnection)
      azureResourceGroup: $(resourceGroupName)
      kubernetesCluster: $(aksName)
      command: 'get'
      arguments: nodes
      useClusterAdmin: false

  # Works as admin credentials are used and kubelogin is not needed
  - task: Kubernetes@1
    condition: succeededOrFailed()
    displayName: 'Kubernetes@1 admin'
    inputs:
      connectionType: 'Azure Resource Manager'
      azureSubscriptionEndpoint: $(subscriptionConnection)
      azureResourceGroup: $(resourceGroupName)
      kubernetesCluster: $(aksName)
      command: 'get'
      arguments: nodes
      useClusterAdmin: true


- job: reDisableLocalAccounts
  condition: and(succeededOrFailed(),eq(coalesce(dependencies.inspectCluster.outputs['localAccounts.disableLocalAccountsOriginalState'],'false'),'true'),ne(coalesce(dependencies.inspectCluster.outputs['localAccounts.disableLocalAccountsOriginalState'],'empty'),'empty'))
  dependsOn: 
    - inspectCluster
    - kubectlLocalAccountsEnabled
    - kubectlTaskLocalAccountsEnabled
    - kubectlLocalAccountsEnabledTimeout
    - kubectlTaskLocalAccountsEnabledTimeout
  displayName: 'Disable Local Accounts'
  pool:
    vmImage: 'ubuntu-latest'
  variables:
    aksName: $[ dependencies.inspectCluster.outputs['split.aksName'] ]
    resourceGroupName: $[ dependencies.inspectCluster.outputs['split.resourceGroupName'] ]
  steps:
  - task: AzureCLI@2
    displayName: 'Re-disable local accounts'
    inputs:
      azureSubscription: '$(subscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        Write-Host "`nDisabling local accounts on $(aksName)..."
        az aks wait   -n $(aksName) -g $(resourceGroupName) --updated
        az aks update -n $(aksName) -g $(resourceGroupName) --disable-local-accounts
        az aks wait   -n $(aksName) -g $(resourceGroupName) --updated
