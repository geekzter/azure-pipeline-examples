trigger: none
schedules:
- cron: '0 1 * * *'
  displayName: 'Nightly build (UTC)'
  always: 'true'
  branches:
    include:
    - main

variables:
- group: 'kubernetes' # should contain subscriptionConnection, aksId
- name: 'KUBECONFIG'
  value: '~/.kube/config'

jobs:
- job: inspectCluster
  displayName: 'Kubernetes access & disable local accounts'
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - pwsh: |
      $aksIdElements = '$(aksId)'.Split('/')
      $aksName = $aksIdElements[8]
      $resourceGroupName = $aksIdElements[4]
      Write-Host "aksId: $(aksId)"
      Write-Host "aksName: ${aksName}"
      Write-Host "resourceGroupName: ${resourceGroupName}"
      Write-Host "##vso[task.setvariable variable=aksName;isOutput=true]${aksName}"
      Write-Host "##vso[task.setvariable variable=resourceGroupName;isOutput=true]${resourceGroupName}"
    displayName: 'Prepare variables'
    name: split

  - task: AzureCLI@2
    displayName: 'Inspect cluster'
    inputs:
      addSpnToEnvironment: true
      azureSubscription: '$(subscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        az aks show -n $(split.aksName) -g $(split.resourceGroupName) `
                    --query "{kubernetesVersion:kubernetesVersion, powerState:powerState.code, disableLocalAccounts:disableLocalAccounts, enableRbac:enableRbac, enableAzureRbac:aadProfile.enableAzureRbac, fqdn:fqdn, privateFqdn:privateFqdn, publicNetworkAccess:publicNetworkAccess, outboundType:networkProfile.outboundType, provisioningState:provisioningState}" `
                    | ConvertFrom-Json `
                    | Set-Variable cluster
        
        $cluster | Format-List
        if (!($cluster.enableAzureRbac)) {
          Write-Error "Azure RBAC is not enabled on $(split.aksName)"
          exit 1
        }

        Write-Host "`nAKS role assignments for the service connection:"
        az role assignment list --assignee $env:servicePrincipalId --include-inherited --scope $(aksId) --query "[].{Role:roleDefinitionName, Scope:scope}" -o table

        if ($cluster.powerState -ne "Running") {
          Write-Host "Starting cluster..."
          az aks start -n $(split.aksName) -g $(split.resourceGroupName)
        }

  # https://learn.microsoft.com/en-us/azure/aks/managed-aad#disable-local-accounts
  - task: AzureCLI@2
    condition: succeededOrFailed()
    displayName: 'Disable local accounts'
    name: localAccounts
    inputs:
      azureSubscription: '$(subscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        az aks show -n $(split.aksName) -g $(split.resourceGroupName) --query "disableLocalAccounts" | Set-Variable disableLocalAccounts
        if ($disableLocalAccounts -ne "true") {
          Write-Host "`nDisabling local accounts on $(split.aksName)..."
          az aks update -n $(split.aksName) -g $(split.resourceGroupName) --disable-local-accounts
        } else {
          Write-Host "Local accounts are already enabled on $(split.aksName)"
        }
        Write-Host "##vso[task.setvariable variable=disableLocalAccountsOriginalState;isOutput=true]${disableLocalAccounts}"


- job: kubectlLocalAccountsDisabled
  dependsOn: inspectCluster
  displayName: 'kubectl (local accounts disabled)'
  variables:
    aksName: $[ dependencies.inspectCluster.outputs['split.aksName'] ]
    resourceGroupName: $[ dependencies.inspectCluster.outputs['split.resourceGroupName'] ]
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - task: AzureCLI@2
    condition: succeededOrFailed()
    continueOnError: true 
    displayName: 'kubectl (fails)'
    inputs:
      azureSubscription: '$(subscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        # if (Test-Path $env:KUBECONFIG) {
        #   Write-Host "Removing ${env:KUBECONFIG}..."
        #   Remove-Item $env:KUBECONFIG
        # }
        kubectl config unset contexts.$(aksName)
        kubectl config unset contexts.$(aksName)-admin

        az aks get-credentials -n $(aksName) -g $(resourceGroupName) --overwrite-existing

        kubectl config view
        kubectl cluster-info
        kubectl get nodes

  - task: AzureCLI@2
    condition: succeededOrFailed()
    continueOnError: true 
    displayName: 'kubectl admin (fails)'
    inputs:
      azureSubscription: '$(subscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        # if (Test-Path $env:KUBECONFIG) {
        #   Write-Host "Removing ${env:KUBECONFIG}..."
        #   Remove-Item $env:KUBECONFIG
        # }
        kubectl config unset contexts.$(aksName)
        kubectl config unset contexts.$(aksName)-admin

        az aks get-credentials -n $(aksName) -g $(resourceGroupName) --overwrite-existing -a

        kubectl config view
        kubectl cluster-info
        kubectl get nodes

  - task: AzureCLI@2
    condition: succeededOrFailed()
    continueOnError: true 
    displayName: 'Install kubelogin with az cli (fails)'
    inputs:
      azureSubscription: '$(subscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        az aks install-cli --kubelogin-version latest

  - pwsh: |
      # Get latest release for Linux amd64
      $zip = "kubelogin-linux-amd64.zip"

      Write-Host "`nDetermining latest release of kubelogin..."
      Invoke-RestMethod -Uri https://api.github.com/repos/Azure/kubelogin/releases | Set-Variable releases
      Write-Host "kubelogin releases:"
      $releases | Format-Table -Property tag_name, published_at, draft, prerelease
      $releases | Where-Object {!$_.prerelease -and !$_.draft}
                | Select-Object -ExpandProperty assets  `
                | Where-Object -Property name -eq $zip `
                | Sort-Object -Property created_at -Descending `
                | Select-Object -First 1 `
                | Set-Variable asset
      if (!$asset) {
        Write-Error "Could not find release for $zip"
        exit 1
      }
      $asset | Format-List

      # Download and extract kubelogin
      Write-Host "`nDownloading kubelogin from $($asset.browser_download_url)..."
      Invoke-Webrequest -Uri $asset.browser_download_url -OutFile $zip -UseBasicParsing
      Expand-Archive $zip -DestinationPath .
      Get-ChildItem -Path . -Filter kubelogin -Recurse -Force | Set-Variable kubeloginFile 
      chmod +X $kubeloginFile.FullName
      Write-Host "Installed kubelogin in $($kubeloginFile.DirectoryName)"

      # Add kubelogin to PATH
      Write-Host "##vso[task.prependpath]$($kubeloginFile.DirectoryName)"
      Write-Host "##vso[task.setvariable variable=directoryName;isOutput=true]$($kubeloginFile.DirectoryName)"
      Write-Host "##vso[task.setvariable variable=fullName;isOutput=true]$($kubeloginFile.FullName)"
    condition: succeededOrFailed()
    displayName: 'Install kubelogin from zip'
    name: kubelogin
    retryCountOnTaskFailure: 3

  - pwsh: |
      kubelogin -h
    displayName: 'Test kubelogin'

  - task: AzureCLI@2
    displayName: 'kubectl with kubelogin (azure cli)'
    inputs:
      azureSubscription: '$(subscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        # if (Test-Path $env:KUBECONFIG) {
        #   Write-Host "Removing ${env:KUBECONFIG}..."
        #   Remove-Item $env:KUBECONFIG
        # }
        kubectl config unset contexts.$(aksName)
        kubectl config unset contexts.$(aksName)-admin

        kubelogin remove-tokens
        az aks get-credentials -n $(aksName) -g $(resourceGroupName) --overwrite-existing
        kubelogin convert-kubeconfig -l azurecli

        kubectl config view
        kubectl cluster-info
        kubectl get nodes

  - task: AzureCLI@2
    condition: succeededOrFailed()
    displayName: 'kubectl with kubelogin (sp)'
    inputs:
      addSpnToEnvironment: true
      azureSubscription: '$(subscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        # if (Test-Path $env:KUBECONFIG) {
        #   Write-Host "Removing ${env:KUBECONFIG}..."
        #   Remove-Item $env:KUBECONFIG
        # }
        kubectl config unset contexts.$(aksName)
        kubectl config unset contexts.$(aksName)-admin

        kubelogin remove-tokens
        az aks get-credentials -n $(aksName) -g $(resourceGroupName) --overwrite-existing
        kubelogin convert-kubeconfig -l spn --client-id $env:servicePrincipalId --client-secret $env:servicePrincipalKey

        kubectl config view
        kubectl cluster-info
        kubectl get nodes


- job: kubectlTaskLocalAccountsDisabled
  dependsOn: inspectCluster
  displayName: 'Kubernetes@1 (local accounts disabled)'
  variables:
    aksName: $[ dependencies.inspectCluster.outputs['split.aksName'] ]
    resourceGroupName: $[ dependencies.inspectCluster.outputs['split.resourceGroupName'] ]
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - task: Kubernetes@1
    continueOnError: true 
    displayName: 'Kubernetes@1 (fails)'
    inputs:
      connectionType: 'Azure Resource Manager'
      azureSubscriptionEndpoint: $(subscriptionConnection)
      azureResourceGroup: $(resourceGroupName)
      kubernetesCluster: $(aksName)
      command: 'get'
      arguments: nodes
      useClusterAdmin: false

  - task: Kubernetes@1
    continueOnError: true 
    displayName: 'Kubernetes@1 admin (fails)'
    inputs:
      connectionType: 'Azure Resource Manager'
      azureSubscriptionEndpoint: $(subscriptionConnection)
      azureResourceGroup: $(resourceGroupName)
      kubernetesCluster: $(aksName)
      command: 'get'
      arguments: nodes
      useClusterAdmin: true

  - pwsh: |
      # Get latest release for Linux amd64
      $zip = "kubelogin-linux-amd64.zip"

      Write-Host "`nDetermining latest release of kubelogin..."
      Invoke-RestMethod -Uri https://api.github.com/repos/Azure/kubelogin/releases | Set-Variable releases
      Write-Host "kubelogin releases:"
      $releases | Format-Table -Property tag_name, published_at, draft, prerelease
      $releases | Where-Object {!$_.prerelease -and !$_.draft}
                | Select-Object -ExpandProperty assets  `
                | Where-Object -Property name -eq $zip `
                | Sort-Object -Property created_at -Descending `
                | Select-Object -First 1 `
                | Set-Variable asset
      if (!$asset) {
        Write-Error "Could not find release for $zip"
        exit 1
      }
      $asset | Format-List

      # Download and extract kubelogin
      Write-Host "`nDownloading kubelogin from $($asset.browser_download_url)..."
      Invoke-Webrequest -Uri $asset.browser_download_url -OutFile $zip -UseBasicParsing
      Expand-Archive $zip -DestinationPath .
      Get-ChildItem -Path . -Filter kubelogin -Recurse -Force | Set-Variable kubeloginFile 
      chmod +X $kubeloginFile.FullName
      Write-Host "Installed kubelogin in $($kubeloginFile.DirectoryName)"

      # Add kubelogin to PATH
      Write-Host "##vso[task.prependpath]$($kubeloginFile.DirectoryName)"
      Write-Host "##vso[task.setvariable variable=directoryName;isOutput=true]$($kubeloginFile.DirectoryName)"
      Write-Host "##vso[task.setvariable variable=fullName;isOutput=true]$($kubeloginFile.FullName)"
    condition: succeededOrFailed()
    displayName: 'Install kubelogin from zip'
    name: kubelogin
    retryCountOnTaskFailure: 3

  - task: AzureCLI@2
    displayName: 'Configure kubelogin (azure cli)'
    inputs:
      addSpnToEnvironment: true
      azureSubscription: '$(subscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        # if (Test-Path $env:KUBECONFIG) {
        #   Write-Host "Removing ${env:KUBECONFIG}..."
        #   Remove-Item $env:KUBECONFIG
        # }
        kubectl config unset contexts.$(aksName)
        kubectl config unset contexts.$(aksName)-admin

        kubelogin remove-tokens
        az aks get-credentials -n $(aksName) -g $(resourceGroupName) --overwrite-existing
        kubelogin convert-kubeconfig -l spn --client-id $env:servicePrincipalId --client-secret $env:servicePrincipalKey

        kubectl config view
        kubectl cluster-info
        kubectl get nodes

  - task: Kubernetes@1
    displayName: 'Kubernetes@1'
    inputs:
      connectionType: 'None'
      azureSubscriptionEndpoint: $(subscriptionConnection)
      azureResourceGroup: $(resourceGroupName)
      kubernetesCluster: $(aksName)
      command: 'get'
      arguments: nodes
      useClusterAdmin: false

  - task: AzureCLI@2
    condition: succeededOrFailed()
    displayName: 'Configure kubectl with kubelogin (sp)'
    inputs:
      addSpnToEnvironment: true
      azureSubscription: '$(subscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        if (Test-Path $env:KUBECONFIG) {
          Write-Host "Removing ${env:KUBECONFIG}..."
          Remove-Item $env:KUBECONFIG
        }
        kubelogin remove-tokens
        az aks get-credentials -n $(aksName) -g $(resourceGroupName) --overwrite-existing
        kubelogin convert-kubeconfig -l spn --client-id $env:servicePrincipalId --client-secret $env:servicePrincipalKey

        kubectl config view
        kubectl cluster-info
        kubectl get nodes


# - job: enableLocalAccounts
#   dependsOn: 
#   - inspectCluster
#   - kubectlLocalAccountsDisabled
#   # - kubectlTaskLocalAccountsDisabled
#   displayName: 'Enable Local Accounts'
#   pool:
#     vmImage: 'ubuntu-latest'
#   variables:
#     aksName: $[ dependencies.inspectCluster.outputs['split.aksName'] ]
#     resourceGroupName: $[ dependencies.inspectCluster.outputs['split.resourceGroupName'] ]
#   steps:
#   - task: AzureCLI@2
#     condition: succeededOrFailed()
#     displayName: 'Enable local accounts'
#     inputs:
#       azureSubscription: '$(subscriptionConnection)'
#       scriptType: pscore
#       scriptLocation: inlineScript
#       inlineScript: |
#         Write-Host "`nEnabling local accounts on $(aksName)..."
#         az aks update -n $(aksName) -g $(resourceGroupName) --enable-local-accounts

#   - bash: |
#       echo kubelogin directory before removal: $(kubelogin.directoryName)
#       ls -al $(kubelogin.directoryName)

#       echo removing $(kubelogin.fullName)...
#       kubelogin remove-tokens
#       rm $(kubelogin.fullName)

#       echo kubelogin directory after removal: $(kubelogin.directoryName)
#       ls -al $(kubelogin.directoryName)
#     condition: succeededOrFailed()
#     displayName: 'Remove kubelogin'


# - job: kubectlLocalAccountsEnabled
#   dependsOn: 
#   - inspectCluster
#   - enableLocalAccounts
#   displayName: 'kubectl (local accounts enabled)'
#   pool:
#     vmImage: 'ubuntu-latest'
#   variables:
#     aksName: $[ dependencies.inspectCluster.outputs['split.aksName'] ]
#     resourceGroupName: $[ dependencies.inspectCluster.outputs['split.resourceGroupName'] ]
#   steps:
#   - task: AzureCLI@2
#     condition: succeededOrFailed()
#     continueOnError: true 
#     displayName: 'kubectl (fails)'
#     inputs:
#       azureSubscription: '$(subscriptionConnection)'
#       scriptType: pscore
#       scriptLocation: inlineScript
#       inlineScript: |
#         if (Test-Path $env:KUBECONFIG) {
#           Write-Host "Removing ${env:KUBECONFIG}..."
#           Remove-Item $env:KUBECONFIG
#         }
#         az aks get-credentials -n $(aksName) -g $(resourceGroupName) --overwrite-existing

#         kubectl config view
#         kubectl cluster-info
#         kubectl get nodes

#   - task: AzureCLI@2
#     condition: succeededOrFailed()
#     displayName: 'kubectl admin'
#     inputs:
#       azureSubscription: '$(subscriptionConnection)'
#       scriptType: pscore
#       scriptLocation: inlineScript
#       inlineScript: |
#         if (Test-Path $env:KUBECONFIG) {
#           Write-Host "Removing ${env:KUBECONFIG}..."
#           Remove-Item $env:KUBECONFIG
#         }
#         az aks get-credentials -n $(aksName) -g $(resourceGroupName) --overwrite-existing -a

#         kubectl config view
#         kubectl cluster-info
#         kubectl get nodes


# - job: redisableLocalAccounts
#   condition: and(succeededOrFailed(),eq(coalesce(dependencies.inspectCluster.outputs['localAccounts.disableLocalAccountsOriginalState'],'false'),'true'))
#   dependsOn: 
#     - inspectCluster
#     - kubectlLocalAccountsEnabled
#   displayName: 'Disable Local Accounts'
#   pool:
#     vmImage: 'ubuntu-latest'
#   variables:
#     aksName: $[ dependencies.inspectCluster.outputs['split.aksName'] ]
#     resourceGroupName: $[ dependencies.inspectCluster.outputs['split.resourceGroupName'] ]
#   steps:
#   - task: AzureCLI@2
#     displayName: 'Re-disable local accounts'
#     inputs:
#       azureSubscription: '$(subscriptionConnection)'
#       scriptType: pscore
#       scriptLocation: inlineScript
#       inlineScript: |
#         Write-Host "`nDisabling local accounts on $(aksName)..."
#         az aks update -n $(aksName) -g $(resourceGroupName) --disable-local-accounts
