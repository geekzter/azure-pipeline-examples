trigger: none
schedules:
- cron: '0 1 * * *'
  displayName: 'Nightly build (UTC)'
  always: 'true'
  branches:
    include:
    - main


variables:
- group: 'kubernetes' # should contain subscriptionConnection, aksId

jobs:
- job: agent
  displayName: 'Kubernetes access'
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - pwsh: |
      $aksIdElements = '$(aksId)'.Split('/')
      $aksName = $aksIdElements[8]
      $resourceGroupName = $aksIdElements[4]
      Write-Host "aksId: $(aksId)"
      Write-Host "aksName: ${aksName}"
      Write-Host "resourceGroupName: ${resourceGroupName}"
      Write-Host "##vso[task.setvariable variable=aksName;isOutput=true]${aksName}"
      Write-Host "##vso[task.setvariable variable=resourceGroupName;isOutput=true]${resourceGroupName}"
    displayName: 'Prepare variables'
    name: split

  - task: AzureCLI@2
    displayName: 'Inspect cluster'
    inputs:
      azureSubscription: '$(subscriptionConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        az aks show -n $(split.aksName) -g $(split.resourceGroupName) `
                    --query "{kubernetesVersion:kubernetesVersion, powerState:powerState.code, disableLocalAccounts:disableLocalAccounts, enableRbac:enableRbac, enableAzureRbac:aadProfile.enableAzureRbac, fqdn:fqdn, privateFqdn:privateFqdn, publicNetworkAccess:publicNetworkAccess, outboundType:networkProfile.outboundType, provisioningState:provisioningState}" `
                    | ConvertFrom-Json `
                    | Set-Variable cluster
        
        $cluster | Format-List
        if (!($cluster.enableAzureRbac)) {
          Write-Error "Azure RBAC is not enabled on $(split.aksName)"
          exit 1
        }
        if ($cluster.powerState -ne "Running") {
          Write-Host "Starting cluster..."
          az aks start -n $(split.aksName) -g $(split.resourceGroupName)
        }

          # List environment variables
        # Get-ChildItem -Path Env: -Recurse -Include ALTERNATE_*,ARM_*,AZURE_*,PIPELINE_DEMO_*,SYSTEM_*,TF_* | Sort-Object -Property Name
        Get-ChildItem -Path Env: -Recurse -Include * | Sort-Object -Property Name


  # # https://learn.microsoft.com/en-us/azure/aks/managed-aad#disable-local-accounts
  # - task: AzureCLI@2
  #   displayName: 'Disable local accounts'
  #   name: localAccounts
  #   inputs:
  #     azureSubscription: '$(subscriptionConnection)'
  #     scriptType: pscore
  #     scriptLocation: inlineScript
  #     inlineScript: |
  #       az aks show -n $(split.aksName) -g $(split.resourceGroupName) --query "disableLocalAccounts" | Set-Variable disableLocalAccounts
  #       if ($disableLocalAccounts -ne "true") {
  #         Write-Host "`nDisabling local accounts on $(split.aksName)..."
  #         az aks update -n $(split.aksName) -g $(split.resourceGroupName) --disable-local-accounts
  #       } else {
  #         Write-Host "Local accounts are already enabled on $(split.aksName)"
  #       }
  #       Write-Host "##vso[task.setvariable variable=disableLocalAccountsOriginalState;isOutput=true]${disableLocalAccounts}"

  # - task: AzureCLI@2
  #   displayName: 'kubectl (fails)'
  #   continueOnError: true 
  #   inputs:
  #     azureSubscription: '$(subscriptionConnection)'
  #     scriptType: pscore
  #     scriptLocation: inlineScript
  #     inlineScript: |
  #       kubectl config delete-context $(split.aksName) 2>&1
  #       az aks get-credentials -n $(split.aksName) -g $(split.resourceGroupName) --overwrite-existing

  #       kubectl config view
  #       kubectl cluster-info
  #       kubectl get nodes

  # - task: AzureCLI@2
  #   displayName: 'kubectl admin (fails)'
  #   condition: succeededOrFailed()
  #   continueOnError: true 
  #   inputs:
  #     azureSubscription: '$(subscriptionConnection)'
  #     scriptType: pscore
  #     scriptLocation: inlineScript
  #     inlineScript: |
  #       kubectl config delete-context $(split.aksName) 2>&1
  #       az aks get-credentials -n $(split.aksName) -g $(split.resourceGroupName) --overwrite-existing -a

  #       kubectl config view
  #       kubectl cluster-info
  #       kubectl get nodes

  # - task: AzureCLI@2
  #   displayName: 'Install kubelogin with az cli (fails)'
  #   continueOnError: true 
  #   inputs:
  #     azureSubscription: '$(subscriptionConnection)'
  #     scriptType: pscore
  #     scriptLocation: inlineScript
  #     inlineScript: |
  #       az aks install-cli --kubelogin-version latest

  # - pwsh: |
  #     # Get latest release for Linux amd64
  #     $zip = "kubelogin-linux-amd64.zip"

  #     Write-Host "`nDetermining latest release of kubelogin..."
  #     Invoke-RestMethod -Uri https://api.github.com/repos/Azure/kubelogin/releases/latest | Set-Variable release
  #     $release.assets | Format-Table -Property name, browser_download_url
  #     $release.assets | Where-Object -Property name -eq $zip | Set-Variable asset
  #     $asset | Format-List

  #     # Download and extract kubelogin
  #     Write-Host "`nDownloading kubelogin from $($asset.browser_download_url)..."
  #     Invoke-Webrequest -Uri $asset.browser_download_url -OutFile $zip -UseBasicParsing
  #     Expand-Archive $zip -DestinationPath .
  #     Get-ChildItem -Path . -Filter kubelogin -Recurse -Force | Set-Variable kubeloginFile 
  #     chmod +X $kubeloginFile.FullName

  #     Write-Host "Installed kubelogin $($release.tag_name) in $($kubeloginFile.DirectoryName)"

  #     # Add kubelogin to PATH
  #     Write-Host "##vso[task.prependpath]$($kubeloginFile.DirectoryName)"
  #     Write-Host "##vso[task.setvariable variable=directoryName;isOutput=true]$($kubeloginFile.DirectoryName)"
  #     Write-Host "##vso[task.setvariable variable=fullName;isOutput=true]$($kubeloginFile.FullName)"
  #   displayName: 'Install kubelogin from zip'
  #   name: kubelogin

  # - pwsh: |
  #     kubelogin -h
  #   displayName: 'Test kubelogin'

  # - task: AzureCLI@2
  #   displayName: 'kubectl with kubelogin (azure cli)'
  #   inputs:
  #     azureSubscription: '$(subscriptionConnection)'
  #     scriptType: pscore
  #     scriptLocation: inlineScript
  #     inlineScript: |
  #       kubectl config delete-context $(split.aksName) 2>&1
  #       kubelogin remove-tokens
  #       az aks get-credentials -n $(split.aksName) -g $(split.resourceGroupName) --overwrite-existing
  #       kubelogin convert-kubeconfig -l azurecli

  #       kubectl config view
  #       kubectl cluster-info
  #       kubectl get nodes

  # - task: AzureCLI@2
  #   condition: succeededOrFailed()
  #   displayName: 'kubectl with kubelogin (sp)'
  #   inputs:
  #     addSpnToEnvironment: true
  #     azureSubscription: '$(subscriptionConnection)'
  #     scriptType: pscore
  #     scriptLocation: inlineScript
  #     inlineScript: |
  #       kubectl config delete-context $(split.aksName) 2>&1
  #       kubelogin remove-tokens
  #       az aks get-credentials -n $(split.aksName) -g $(split.resourceGroupName) --overwrite-existing
  #       kubelogin convert-kubeconfig -l spn --client-id $env:servicePrincipalId --client-secret $env:servicePrincipalKey

  #       kubectl config view
  #       kubectl cluster-info
  #       kubectl get nodes

  # - task: AzureCLI@2
  #   condition: succeededOrFailed()
  #   displayName: 'Enable local accounts'
  #   inputs:
  #     azureSubscription: '$(subscriptionConnection)'
  #     scriptType: pscore
  #     scriptLocation: inlineScript
  #     inlineScript: |
  #       Write-Host "`nEnabling local accounts on $(split.aksName)..."
  #       az aks update -n $(split.aksName) -g $(split.resourceGroupName) --enable-local-accounts

  # - bash: |
  #     echo kubelogin directory before removal: $(kubelogin.directoryName)
  #     ls -al $(kubelogin.directoryName)

  #     echo removing $(kubelogin.fullName)...
  #     kubelogin remove-tokens
  #     rm $(kubelogin.fullName)

  #     echo kubelogin directory after removal: $(kubelogin.directoryName)
  #     ls -al $(kubelogin.directoryName)
  #   displayName: 'Remove kubelogin'

  # - task: AzureCLI@2
  #   continueOnError: true 
  #   displayName: 'kubectl (fails)'
  #   inputs:
  #     azureSubscription: '$(subscriptionConnection)'
  #     scriptType: pscore
  #     scriptLocation: inlineScript
  #     inlineScript: |
  #       kubectl config delete-context $(split.aksName) 2>&1
  #       az aks get-credentials -n $(split.aksName) -g $(split.resourceGroupName) --overwrite-existing

  #       kubectl config view
  #       kubectl cluster-info
  #       kubectl get nodes

  # - task: AzureCLI@2
  #   condition: succeededOrFailed()
  #   continueOnError: true 
  #   displayName: 'kubectl admin (fails)'
  #   inputs:
  #     azureSubscription: '$(subscriptionConnection)'
  #     scriptType: pscore
  #     scriptLocation: inlineScript
  #     inlineScript: |
  #       kubectl config delete-context $(split.aksName) 2>&1
  #       az aks get-credentials -n $(split.aksName) -g $(split.resourceGroupName) --overwrite-existing -a

  #       kubectl config view
  #       kubectl cluster-info
  #       kubectl get nodes

  # - task: AzureCLI@2
  #   condition: and(succeededOrFailed(),eq(coalesce(variables['localAccounts.disableLocalAccountsOriginalState'],'false'),'true'))
  #   displayName: 'Re-disable local accounts'
  #   inputs:
  #     azureSubscription: '$(subscriptionConnection)'
  #     scriptType: pscore
  #     scriptLocation: inlineScript
  #     inlineScript: |
  #       Write-Host "`nDisabling local accounts on $(split.aksName)..."
  #       az aks update -n $(split.aksName) -g $(split.resourceGroupName) --disable-local-accounts
