trigger: none
schedules:
- cron: '0 1 * * *'
  displayName: 'Nightly build (UTC)'
  always: 'true'
  branches:
    include:
    - main

variables:
  moduleProject: '$(System.TeamProject)'
  moduleRepository: 'terraform-modules-sample'
  moduleQualifiedRepository: '$(moduleProject)/$(moduleRepository)'
  moduleRepositoryUrl: '$(System.CollectionUri)$(moduleQualifiedRepository)'

pool:
  name: 'Azure Pipelines'
  vmImage: ubuntu-latest

resources:
  repositories:
  - repository: modules
    type: git
    # name: PipelineSamples/terraform-modules-sample
    # name: $(moduleQualifiedRepository)
    name: ${{ variables['System.TeamProject'] }}/terraform-modules-sample

steps:
- checkout: self

# Required if 'Protect access to repositories in YAML pipelines' is enabled
- checkout: modules
  fetchDepth: 0
  persistCredentials: true

- pwsh: |
    Write-Host "MODULE_REPOSITORY_URL: $env:MODULE_REPOSITORY_URL"

    # git config --global http.https://dev.azure.com/ericvan/PipelineSamples.extraheader "Authorization: bearer $(System.AccessToken)"
    git config --global http.${env:MODULE_REPOSITORY_URL}.extraheader "Authorization: bearer $env:SYSTEM_ACCESSTOKEN"
    Get-Content ~/.gitconfig

    terraform init
    terraform apply -auto-approve
  displayName: 'Terraform apply'
  env:
    MODULE_REPOSITORY_URL: $(moduleRepositoryUrl)
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)
  # workingDirectory: deployment/terraform-modules
  workingDirectory: azure-pipeline-examples/deployment/terraform-modules

- pwsh: |
    # git config --global --unset-all http.https://dev.azure.com/ericvan/PipelineSamples.extraheader
    git config --global --unset-all http.${env:MODULE_REPOSITORY_URL}.extraheader
  condition: always()
  continueOnError: true
  displayName: 'Cleanup git config'
  env:
    MODULE_REPOSITORY_URL: $(moduleRepositoryUrl)
