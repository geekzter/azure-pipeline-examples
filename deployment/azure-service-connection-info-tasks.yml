parameters:
- name: serviceConnection
  displayName: Override Service Connection
  type: string
  default: '<from subscriptionConnection variable>'
- name: jobType
  displayName: Job type
  type: string
  default: agentJob
  values:
  - agentJob
  - containerJob
  - deploymentJob
  - environmentVM
- name: poolName
  displayName: Agent Pool
  type: string
  default: 'Azure Pipelines'
- name: vmImage
  displayName: Agent Pool
  type: string
  default: 'ubuntu-latest'
- name: environmentName
  displayName: Environment
  type: string
  default: 'scratch'
- name: additionalVariableGroup
  displayName: Variable Group (Key Vault test)
  type: string
  default: 'empty'

steps:
- ${{ if ne(parameters.additionalVariableGroup,'empty') }}:
  - task: AzureKeyVault@2
    displayName: 'AzureKeyVault: Access Key Vault (runAsPreJob)'
    inputs:
      azureSubscription: '$(serviceConnection)'
      keyVaultName: ${{ parameters.additionalVariableGroup }}
      secretsFilter: '*'
      runAsPreJob: true
  - task: AzureKeyVault@2
    displayName: 'AzureKeyVault: Access Key Vault'
    inputs:
      azureSubscription: '$(serviceConnection)'
      keyVaultName: ${{ parameters.additionalVariableGroup }}
      secretsFilter: '*'
      runAsPreJob: false

- task: AzureCLI@2
  displayName: 'AzureCLI: $(serviceConnection)'
  inputs:
    addSpnToEnvironment: true
    azureSubscription: '$(serviceConnection)' # Task property referencing Service Connection -------------------------------------------------------
    scriptType: pscore
    scriptLocation: inlineScript
    inlineScript: |
      Write-Host "`n$($PSStyle.Bold)Service Connection name: '$(serviceConnection)'$($PSStyle.Reset) -----------------------------------------------"

      Write-Host "Service Connection ID: ${env:AZURESUBSCRIPTION_SERVICE_CONNECTION_ID}"
      Write-Host "Service Connection endpoint data:"
      Get-ChildItem -Path Env: -Recurse `
                               -Include AZURESUBSCRIPTION_*, ENDPOINT_DATA_*, SYSTEM_OIDC* `
                               | Sort-Object -Property Name `
                               | ForEach-Object { 
                                   if ($_.Name -match 'SECRET|TOKEN') {
                                     $_.Value = '***'
                                   } 
                                   $_
                                 } `
                               | Format-Table -HideTableHeaders -Property @{Expression='Name';Width=75}, @{Expression='Value';Width=175} -Wrap `
                               | Out-String -Width 256

      Write-Host "`nVariables added by 'addSpnToEnvironment':" -NoNewline
      Get-ChildItem -Path Env: `
                    -Recurse -Include idToken, `
                                      servicePrincipalId, `
                                      servicePrincipalKey,`
                                      tenantId `
                    | Sort-Object -Property Name `
                    | Select-Object -Property Name `
                    | Format-Table -HideTableHeaders
      if ($env:servicePrincipalKey) {
        Write-Host "Using Service Principal secret for authentication"
      } elseif ($env:idToken) {
        Write-Host "Using Workload Identity federation (OIDC) for authentication"
      }

      Write-Host "`n$($PSStyle.Formatting.FormatAccent)az account show$($PSStyle.Reset)"
      az account show -o json `
                      | Tee-Object -FilePath subscription.json `
                      | ConvertFrom-Json `
                      | Set-Variable subscription
      Get-Content subscription.json
      $appId = $subscription.user.name

      Write-Host "`n$($PSStyle.Bold)Service Connection role assignments:$($PSStyle.Reset) ---------------------------------------------------------------"
      Write-Host "$($PSStyle.Formatting.FormatAccent)az role assignment list --assignee <appId>$($PSStyle.Reset)"
      az role assignment list --all `
                              --assignee $appId `
                              -o json `
                              | Tee-Object -FilePath roleAssignments.json `
                              | ConvertFrom-Json `
                              | Select-Object -Property roleDefinitionName, scope `
                              | Sort-Object -Property roleDefinitionName
                              | Format-Table -AutoSize -Wrap


      Write-Host "`n$($PSStyle.Bold)Service Connection Service Principal object:$($PSStyle.Reset) -------------------------------------------------------"
      Write-Host "$($PSStyle.Formatting.FormatAccent)az ad sp show --id <appId>$($PSStyle.Reset)"
      az ad sp show --id $appId `
                    -o json `
                    | Tee-Object -FilePath servicePrincipal.json `
                    | ConvertFrom-Json `
                    | Set-Variable servicePrincipal
      Get-Content servicePrincipal.json
      if ($servicePrincipal.servicePrincipalType -eq 'ManagedIdentity') {
        "https://portal.azure.com/#@{0}/resource{1}" -f $subscription.tenantId, $servicePrincipal.alternativeNames[1] | Set-Variable azurePortalLink
      } else {
        "https://portal.azure.com/{0}/#blade/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/Overview/appId/{1}/isMSAApp/" -f $subscription.tenantId, $appId | Set-Variable azurePortalLink
      }
      Write-Host "`nAzure Portal link for Service Principal of type '$($servicePrincipal.servicePrincipalType)':`n$($azurePortalLink)"


      Write-Host "`nAccess token lifetime: $($PSStyle.Reset) --------------------------------------------------------------------------------------------"
      Write-Host "$($PSStyle.Formatting.FormatAccent)az account get-access-token$($PSStyle.Reset)"
      az account get-access-token --resource '499b84ac-1321-427f-aa17-267ca6975798' `
                                  --query "expiresOn" `
                                  --output tsv `
                                  | Set-Variable expiresOn
      if ($expiresOn) {
        Write-Host "Access tokens expire in $([math]::Round(([DateTime]::Parse($expiresOn) - [DateTime]::Now).TotalMinutes)) minutes"            
      } else {
        Write-Host "##vso[task.logissue type=error]Could not get access token"
      }


      Write-Host "`n$($PSStyle.Bold)Subscriptions the Service Connection has access to:$($PSStyle.Reset) ------------------------------------------------"
      Write-Host "$($PSStyle.Formatting.FormatAccent)az account list$($PSStyle.Reset)"
      az account list --query "sort_by([].{Name:name, SubscriptionId:id}, &Name)" `
                      -o table
      

      Write-Host "`n$($PSStyle.Bold)Resource groups that the Service Connection has access to in subscription '$(az account show --query name -o tsv)':$($PSStyle.Reset) -------------"
      Write-Host "$($PSStyle.Formatting.FormatAccent)az group list$($PSStyle.Reset)"
      az group list --query "sort_by([].{Name:name, ResourceId:id}, &Name)" `
                    -o table
    workingDirectory: '$(Build.ArtifactStagingDirectory)'

- task: AzurePowerShell@5
  displayName: 'AzurePowerShell: $(serviceConnection)'
  inputs:
    azureSubscription: '$(serviceConnection)'
    scriptType: inlineScript
    inline: |
      Get-AzContext Format-List
      Get-AzContext | Select-Object -ExpandProperty Subscription | Format-List

    azurePowerShellVersion: 'latestVersion'
    pwsh: true
    failOnStandardError: true

- publish: $(Build.ArtifactStagingDirectory)
  displayName: 'Publish JSON files'
  artifact: indentityInfo-$(System.PlanId)-$(System.JobId)