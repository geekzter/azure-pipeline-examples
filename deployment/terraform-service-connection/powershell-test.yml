parameters:
- name: pool
  displayName: Agent Pool
  type: string
  default: Azure Pipelines
- name: serviceConnection
  displayName: Azure Service Connection Name
  type: string
  default: my-azure-subscription

name: $(Date:yyyyMMdd)$(Rev:.r)-$(Build.DefinitionVersion)-$(SourceBranchName)-${{ parameters.serviceConnection }}-$(Build.BuildId)

pr:
  branches:
    include:
    - '*'
  drafts: false
schedules:
- cron: '0 1 * * *'
  displayName: 'Nightly build (UTC)'
  always: 'true'
  branches:
    include:
    - main
trigger: none

variables:
  sampleRepository: $(Build.SourcesDirectory)
  identityScriptDirectory: $(sampleRepository)/scripts/identity/scripts/azure-devops
  terraformDirectory: $(sampleRepository)/deployment/terraform-service-connection

jobs:
- job: terraformSingleStep
  displayName: 'Same step Azure CLI & Terraform'
  pool:
    name: ${{ parameters.pool }}
    vmImage: 'ubuntu-latest'
  steps:
    - checkout: self
      submodules: true
    - task: TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: 'latest'
    - task: AzureCLI@2
      name: azureCLI
      displayName: 'Terraform Test with Azure CLI task'
      inputs:
        azureSubscription: '${{ parameters.serviceConnection }}'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          # List environment variables
          Get-ChildItem Env: | Sort-Object -Property Name | Format-Table

          # Run Terraform within task
          terraform init

          # Process all test files
          Get-ChildItem *.tftest.hcl | ForEach-Object { 
            # The idToken may have expired between test runs
            # Request new idToken with REST API:
            # https://learn.microsoft.com/rest/api/azure/devops/distributedtask/oidctoken/create
            $(identityScriptDirectory)/set_terraform_azurerm_vars.ps1 -RequestNewToken -SystemAccessToken $(System.AccessToken)
            Write-Host "Processing $($_.name)..."
            Write-Host "terraform test -verbose -filter=`"$($_.name)`""
            terraform test -verbose -filter="$($_.name)"
          }
        useGlobalConfig: true
        addSpnToEnvironment: true
        failOnStandardError: true
        workingDirectory: $(terraformDirectory)
