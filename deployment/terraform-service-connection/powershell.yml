parameters:
- name: pool
  displayName: Agent Pool
  type: string
  default: Azure Pipelines
- name: serviceConnection
  displayName: Azure Service Connection Name
  type: string
  default: my-azure-subscription
- name: createIdToken
  displayName: Create OIDC token
  type: boolean
  default: false

name: $(Date:yyyyMMdd)$(Rev:.r)-$(Build.DefinitionVersion)-$(SourceBranchName)-$(Build.BuildId)

trigger: none
schedules:
- cron: '0 1 * * *'
  displayName: 'Nightly build (UTC)'
  always: 'true'
  branches:
    include:
    - main

jobs:
- job: terraformSingleStep
  displayName: 'Same step Azure CLI & Terraform'
  pool:
    name: ${{ parameters.pool }}
    vmImage: 'ubuntu-latest'
  steps:
    - task: AzureCLI@2
      name: azureCLI
      continueOnError: true
      displayName: 'Terraform with Azure CLI task'
      inputs:
        azureSubscription: '${{ parameters.serviceConnection }}'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          # Propagate Azure context to Terraform
          az account show | ConvertFrom-Json | Set-Variable account
          $env:ARM_CLIENT_ID       ??= $account.user.name
          $env:ARM_TENANT_ID       ??= $account.tenantId
          $env:ARM_SUBSCRIPTION_ID ??= $account.id              
          Write-Host "##vso[task.setvariable variable=ARM_CLIENT_ID;isoutput=true;issecret=true]${env:ARM_CLIENT_ID}"
          Write-Host "##vso[task.setvariable variable=ARM_TENANT_ID;isoutput=true]${env:ARM_TENANT_ID}"
          Write-Host "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID;isoutput=true]${env:ARM_SUBSCRIPTION_ID}"

          # Get service connection ID
          Get-ChildItem -Path Env: -Recurse -Include ENDPOINT_DATA_* | Sort-Object -Property Name `
                                                                     | Select-Object -First 1 -ExpandProperty Name `
                                                                     | ForEach-Object { $_ -replace 'ENDPOINT_DATA_','' } `
                                                                     | Set-Variable serviceConnectionId
          if (!$serviceConnectionId) {
            Get-ChildItem -Path Env: -Recurse -Include ENDPOINT_DATA_* | Sort-Object -Property Name | Format-Table
            Write-Error "Could not find service connection ID"
            exit 1
          }

          # Build token request URL
          $env:ARM_OIDC_REQUEST_URL = "${env:SYSTEM_TEAMFOUNDATIONCOLLECTIONURI}${env:SYSTEM_TEAMPROJECTID}/_apis/distributedtask/hubs/build/plans/${env:SYSTEM_PLANID}/jobs/${env:SYSTEM_JOBID}/oidctoken?api-version=7.1-preview.1&serviceConnectionId=${serviceConnectionId}"

          # List environment variables
          Get-ChildItem -Path Env: -Recurse -Include ARM_*,AZURE_*,ENDPOINT_DATA_*,SYSTEM_*,TF_* | Sort-Object -Property Name | Format-Table

          $env:ARM_OIDC_REQUEST_TOKEN = '$(System.AccessToken)'
          # if ($${{ parameters.createIdToken }}) {
            Write-Host "`nRequesting OIDC token from Azure DevOps..."
            Invoke-RestMethod -Headers @{
                                Authorization  = "Bearer ${env:ARM_OIDC_REQUEST_TOKEN}"
                                'Content-Type' = 'application/json'
                              } `
                              -Uri "${env:ARM_OIDC_REQUEST_URL}" `
                              -Method Post #| Set-Variable oidcTokenResponse
          #   $oidcTokenResponse
          #   $oidcTokenResponse | Set-Item env:ARM_OIDC_TOKEN
          #   if (!$env:ARM_OIDC_TOKEN) {
          #     Write-Error "Could not get OIDC token"
          #     exit 1
          #   }
          #   $env:ARM_OIDC_REQUEST_TOKEN = $null
          #   $env:ARM_OIDC_REQUEST_URL = $null
          #   Write-Host "Using ARM_OIDC_TOKEN to configure Terraform azurerm provider"
          #   Write-Host "##vso[task.setvariable variable=ARM_OIDC_TOKEN;isoutput=true;issecret=true]${env:ARM_OIDC_TOKEN}"
          # } else {
          #   Write-Host "Using ARM_OIDC_REQUEST_URL and ARM_OIDC_REQUEST_TOKEN to configure Terraform azurerm provider"
          #   Write-Host "##vso[task.setvariable variable=ARM_OIDC_REQUEST_TOKEN;isoutput=true;issecret=true]${env:ARM_OIDC_REQUEST_TOKEN}"
          #   Write-Host "##vso[task.setvariable variable=ARM_OIDC_REQUEST_URL;isoutput=true]${env:ARM_OIDC_REQUEST_URL}"
          # }
          
          # # Logging out from Azure CLI
          # az logout

          # # Run Terraform within task
          # terraform init
          # terraform apply -auto-approve          
        useGlobalConfig: true
        failOnStandardError: true
        workingDirectory: '$(Build.SourcesDirectory)/deployment/terraform-service-connection'
    # - pwsh: |
    #     $env:ARM_CLIENT_ID='$(azureCLI.ARM_CLIENT_ID)'
    #     $env:ARM_TENANT_ID='$(azureCLI.ARM_TENANT_ID)'
    #     $env:ARM_SUBSCRIPTION_ID='$(azureCLI.ARM_SUBSCRIPTION_ID)'
    #     if ($${{ parameters.createIdToken }}) { 
    #       $env:ARM_OIDC_TOKEN='$(azureCLI.ARM_OIDC_TOKEN)'
    #     } else {
    #       $env:ARM_OIDC_REQUEST_TOKEN='$(azureCLI.ARM_OIDC_REQUEST_TOKEN)'
    #       $env:ARM_OIDC_REQUEST_URL='$(azureCLI.ARM_OIDC_REQUEST_URL)'
    #     }

    #     terraform init
    #     terraform apply -auto-approve
    #   displayName: Terraform stand-alone
    #   workingDirectory: '$(Build.SourcesDirectory)/deployment/terraform-service-connection'
