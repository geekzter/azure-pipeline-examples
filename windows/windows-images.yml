trigger: none
schedules:
- cron: '0 1 * * *'
  displayName: 'Nightly build (UTC)'
  always: 'true'
  branches:
    include:
    - main

jobs:
# - job: 'default'
#   displayName: 'Default'
#   pool:
#     name: 'Default'
#     demands:
#     - agent.os -equals Windows_NT
#   steps:
#   - pwsh: |
#       Get-ComputerInfo | Select-Object WindowsProductName

- job: 'hosted'
  displayName: 'Hosted pool'
  pool:
    name: 'Hosted'
    vmImage: 'windows-latest'
  steps:
  - pwsh: |
      Write-Host "(Get-ComputerInfo).WindowsProductName"
      Get-ComputerInfo | Select-Object WindowsProductName
      Write-Host "`$PSVersionTable.OS"
      $PSVersionTable.OS

- job: 'hostedlatest'
  displayName: 'Hosted pool with windows-latest'
  pool:
    name: 'Hosted'
  steps:
  - pwsh: |
      Write-Host "(Get-ComputerInfo).WindowsProductName"
      Get-ComputerInfo | Select-Object WindowsProductName
      Write-Host "`$PSVersionTable.OS"
      $PSVersionTable.OS

- job: 'windows2019'
  displayName: 'windows-2019 image'
  pool:
    vmImage: 'windows-2019'
  steps:
  - pwsh: |
      Write-Host "(Get-ComputerInfo).WindowsProductName"
      Get-ComputerInfo | Select-Object WindowsProductName
      Write-Host "`$PSVersionTable.OS"
      $PSVersionTable.OS

- job: 'windows2022'
  displayName: 'windows-2022 image'
  pool:
    vmImage: 'windows-2022'
  steps:
  - pwsh: |
      Write-Host "(Get-ComputerInfo).WindowsProductName"
      Get-ComputerInfo | Select-Object WindowsProductName
      Write-Host "`$PSVersionTable.OS"
      $PSVersionTable.OS

- job: 'windowslatest'
  displayName: 'windows-latest image'
  pool:
    vmImage: 'windows-latest'
  steps:
  - pwsh: |
      Write-Host "(Get-ComputerInfo).WindowsProductName"
      Get-ComputerInfo | Select-Object WindowsProductName
      Write-Host "`$PSVersionTable.OS"
      $PSVersionTable.OS
